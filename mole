#!/bin/bash
#xpodra03 Jiri Podrazil

POSIXLY_CORRECT=yes

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8


print_help()
{
    echo -e "Usage: \tmole -h"
    echo -e "\tmole [-g GROUP] FILE"
    echo -e "\t\tFILE will be open by yourEditor. Defaul is vim"
    echo -e "\tmole [-m] [FILTERS] [DIRECTORY]"
    echo -e "\t\t"
    echo -e "\tmole list [FILTERS] [DIRECTORY]:"

    echo -e ""
    echo -e "\texport MOLE_RC=yourFILE"
    echo -e "\t\tYou need to set file, where the record will be saved"

    echo -e ""
    echo -e "\texport EDITOR=yourEditor"
    echo -e "\t\tYou can change the editor. Defaul is vim"


    echo -e "\t"
    echo -e "\texport MOLE_RC=yourFILE"
    echo -e "\t\tYou need to set file, where the record will be saved"
    
    if [ "$LOG_FILES" == "" ]; then       
        LOG_FILES="Have not been set yet"    
    fi
    echo -e "\t\tCurrent record file is:\t$LOG_FILES"
    if [ "$LOG_FILES" == "Have not been set yet" ]; then       
        LOG_FILES=""    
    fi

}


FILTER=""               
DATE=""                     #format YYYY-MM-DD
LOG_FILES=$MOLE_RC          #
EDIT=$EDITOR                #default EDITOR is vim. User can change it by this variable
DATE_A="0000-00-00"         #records after this date. others are ignored
DATE_B="9999-99-99"         #records before this date. others are ignored
FILE=""                     #file that user want open
DIRECTORY=""                #directory where user want open file
GROUP=""                    #variable for file GROUP 
COMMAND=""
RECORD=""                  #varialble for command (list, secret-log)
MOST=0


## store passing argument
while [ "$#" -gt 0 ]; do
    case "$1" in
    -h)
        print_help
        exit 0
        ;;
    -a)
        ##Checking if argument is realy given
        if [ -z "$2" ]; then
            echo -e "\t\tError: This option requeres an argument" >&2;
            exit 1;
        fi
        DATE_A="$2"
        shift
        shift
        ;;
    -b)
        ##Checking if argument is realy given
        if [ -z "$2" ]; then
            echo -e "\t\tError: This option requeres an argument" >&2;
            exit 1;
        fi
        DATE_B="$2"
        shift
        shift
        ;;
    -g)
        ##Checking if argument is realy given
        if [ -z "$2" ]; then
            echo -e "\t\tError: This option requeres an argument" >&2;
            exit 1;
        fi
        GROUP="$2"
        shift
        shift
        ;;
    -m)
        MOST=1      ##It should be open the file with most entries
        shift
        ;;
    *)                              
        if [ -z "$COMMAND" ];then         
            COMMAND="$1"
            shift
        else                      
            exit 1
        fi
        ;;
    esac
done



##list
##display list of records with filters
if [ "$COMMAND" == "list" ]; then       
    ##argumets in order:
    #   DIRECTORY       $1
    #   FILE            $2
    #   GROUP           $3
    #   DATE            $4
    
    awk -F ';' -v GROUP=$GROUP -v DATE_A=$DATE_A -v DATE_B=$DATE_B '{
        date = 0;       #variable that hold if FILTER date is passed
        found = 0;      #variable that hold if filter GROUP is passed
        split($4, dates, /,/);                      ##split dates of file to array dates
        
        split(dates[1], dt_a, "_");                 #date part of first date dt_a[1]    (1 is for the date part, 2 is for time part)
        split(dates[length(dates)], dt_b, "_");     #date part of last date_b[1] 
        ##First and last date have to in range (DATE_A;DATE_B)                        
        if ((DATE_A < dt_b[1])&&(DATE_B > dt_a[1]))
            date = 1;
        ##If -g is not set. Just print every record
        if ((GROUP == "")&&(date)){
            if ($3 == "")
                $3 = "-";
            print "." $2 ":\t" $3;          #Printing list
        }       
        
        ##Split $3 to array, where element are GROUPS
        ##Chech if file have wanted GROUP
        split($3, groups, /,/);
        found = 0;
        for (i = 1; i <= length(groups); i++){
            if ((GROUP == groups[i])&&(GROUP != ""))
                found = 1
        }
        if ((found == 1))            
            print "." $2 ":\t" $3;          #Printing list
        
    }' $MOLE_RC | column -s ';' -t  
        
fi

##secret_log
##Create DIRECTORY and FILE and fill with records, the pass filters
if [ "$COMMAND" == "secret-log" ]; then         
    
    SL_DIR=/home/$USER/.mole                        ##Directory for secret-log
    DATETIME=$(date +%F_%H-%M-%S)                   ##DATE for file name
    SL_FILE=log_$USER"_"$DATETIME.bz2               ##Name of the secret-log FILE

    ##Check if secret-log folder already exist
    if [ ! -d "$SL_DIR" ]; then
        mkdir $SL_DIR                               ##Make folder ".mole" in directory /home/USER/
    fi
    
    ##Create file for secret-log
    touch "${SL_DIR}/${SL_FILE}"                    

    ##Check if record pass filter, and print his to secret-log file
    awk -F ';' -v sl_dir=$SL_DIR -v sl_file=$SL_FILE -v DATE_A=$DATE_A -v DATE_B=$DATE_B '{        
        split($4, dates, /,/);                      ##split dates of file to array dates
        
        split(dates[1], dt_a, "_");                 #date part of first date dt_a[1]    (1 is for the date part, 2 is for time part)
        split(dates[length(dates)], dt_b, "_");     #date part of last date_b[1] 
        sl = sl_dir"/"sl_file;
        ##First and last date have to in range (DATE_A;DATE_B)                        
        if ((DATE_A < dt_b[1])&&(DATE_B > dt_a[1])){
            dt=gsub(",",";",$4);                    ##Change format of $4 for printing            
            print $1";"$4 >> sl
        }
    
    }' $MOLE_RC    
    
fi


##file/directory is not set
##pick random file in current directory, and save if into var COMMAND
if [ "$COMMAND" == "" ]; then
    ## -m is given
    if [ $MOST == 1 ]; then
        ##Change value of COMMAND to FILE with most entries
        (awk -F, '
        BEGIN{
            most_opened="";     ##FILE with the most entries currently
            max_entries=0;      ##Currently the most entries
            FS=";"
        }
        
        {
            date_arr = gsub(",", "", $4);
            if (length(date_arr) > most_entries){
                most_open = $2;
                most_entries = length(date_arr);
            }
        }
        END{
            if(most_opened > 0){
                print most_opened;
            }
            else{
                print "";
            }
        }
        ' $MOLE_RC)
        if [ "$COMMAND" == "" ]; then
            echo -e "\t\tError: No opened file was found" >&2;
            exit 1;
        fi
        echo $COMMAND;
    else
        ##Open random file in this DIRECTORY
        COMMAND=($(ls -p | grep -v / | shuf -n 1))

        #Non file in DIRECTORY
        if [ -z "$COMMAND" ]; then
            echo "There is no file in this dictonary that can be open"
            exit 2
        fi
        
    fi        
    
fi


##Open FILE/DERECTORY
##passed argument is not "list" or "sec-log" and it is not empty, so it has to by file, or file dicertory
if [ "$COMMAND" != "list" ] && [ "$COMMAND" != "secret-log" ] && [ "$COMMAND" != "" ]; then
    
    ##Check if MOLE_RC is set
    if [ "$LOG_FILES" == "" ]; then       
        echo -e "\t\tError: MOLE_RC was not set yet\n\t\tSee ./mole -h for help" >&2;
        exit 1;
    fi

    ##Check if set on existing file
    ##If not, create directory in file in MOLE_RC
    if [ ! -e "$LOG_FILE" ]; then
        if [ ! -d "$(dirname "$FILE")" ]; then
            mkdir -p "$(dirname "$FILE")" # Create directory (with parent directories)
        fi
        touch "$LOG_FILES" # Create file if argument MOLE_RC
    fi


    ##Passed argument is DIRECTORY
    ##Pick random FILE, and save to COMMAND (it will be opened later)
    ##If -m is set than open FILE with most entries
    if [ -d $COMMAND ]; then
        COMMAND=($(ls $COMMAND| shuf))
    fi

    
    DIRECTORY=($(pwd))
    DATE=($(date +%F_%H-%M-%S))
    
    ##Make record about opening file
    ##If was FILE opened before, it just append another DATE and GROUP
    awk -F ';' -v MOLE_RC=$MOLE_RC -v DIRECTORY=$DIRECTORY -v COMMAND=$COMMAND -v GROUP=$GROUP -v DATE=$DATE -v COUNT=$COUNT 'NR >0{
    
    ##Test if FILE is already in MORE_RC
    ##If yes, than it is not the first time opening it  FS
    if($2 == COMMAND)
        {found=1}1;
    
    ##Append another DATE to argument $4 and increase $5
    if ($2 == COMMAND){
        system("sed -i \"s/"$4"/"$4","DATE"/g\" $MOLE_RC");
    }
    ##Append another GROUP to argument $3
    if (($2 == COMMAND)){
        ##chech if passed group in new
        ##if its new, append to GROUP string
        newGroup = 1    
        split($3, groups, /,/);
        for (i = 1; i <= length(groups); i++){
            if ((GROUP == groups[i])&&(GROUP != "")){
                newGroup = 0    ##Group is already in $3;
            }                
        }
        ##New GROUP
        if (newGroup){
            system("sed -i \"s/"$3"/"$3","GROUP"/g\" $MOLE_RC");
        }
               
    }    
    } 
    END {
        ##If this FILE havent been opened yet -
        ##  =>make a new record
        COUNT=$COUNT + 1
        if (!found)
            print DIRECTORY";"COMMAND";"GROUP";"DATE >> MOLE_RC;
    }' $MOLE_RC | column -s ';' -t    


    ##check which EDITOR user want to use
    if [ "$EDIT" != "vi" ] && [ "$EDIT" != "" ]; then
        #not dafault editor
        ##open FILE with passed EDITOR
        $EDIT $COMMAND            

    else
        vi $COMMAND     ##dafaul editor is vim   
    fi
fi

exit
